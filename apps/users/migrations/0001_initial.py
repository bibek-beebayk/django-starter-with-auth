# Generated by Django 5.0.1 on 2024-01-08 17:39

import django.db.models.deletion
import django.utils.timezone
import uuid
import versatileimagefield.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="email address"
                    ),
                ),
                ("username", models.CharField(max_length=255, unique=True)),
                (
                    "date_joined",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("last_login", models.DateTimeField(blank=True, null=True)),
                ("login_count", models.BigIntegerField(default=0)),
                ("is_staff", models.BooleanField(default=False)),
                ("is_superuser", models.BooleanField(default=False)),
                ("otp_verified", models.BooleanField(default=False)),
                ("address_country", models.CharField(max_length=255)),
                (
                    "address_state",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("address_city", models.CharField(max_length=255)),
                (
                    "address_street1",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "address_street2",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("bio", models.TextField(blank=True, null=True)),
                ("occupation", models.CharField(max_length=255)),
                ("date_of_birth", models.DateField(null=True)),
                (
                    "gender",
                    models.CharField(
                        choices=[
                            ("Male", "Male"),
                            ("Female", "Female"),
                            ("Other", "Other"),
                        ],
                        max_length=16,
                    ),
                ),
                ("full_name", models.CharField(max_length=255)),
                ("first_name", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "middle_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("last_name", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "phone_number",
                    models.CharField(max_length=255, null=True, unique=True),
                ),
                (
                    "profile_picture",
                    versatileimagefield.fields.VersatileImageField(
                        upload_to="users/profile_pics/"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="OTP",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("otp", models.IntegerField()),
                (
                    "otp_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Registration", "Registration"),
                            ("Password Reset", "Password Reset"),
                        ],
                        max_length=255,
                        null=True,
                    ),
                ),
                ("is_used", models.BooleanField(default=False)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="otps",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
    ]
